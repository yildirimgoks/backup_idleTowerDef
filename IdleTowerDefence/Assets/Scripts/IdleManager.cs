using UnityEngine;
using System;

namespace Assets.Scripts
{
    public class IdleManager
    {
        //Idle Income Calculation
        private BigIntWithUnit _maxPotentialWaveDmg;
        private BigIntWithUnit _mageDps;
        private readonly int _roadLength = 290; //calculated as distances between each waypoint
        private readonly Player _player;
        private readonly Minion _minion;
        private readonly WaveManager _waveManager;

        public IdleManager(Player player, Minion minion, WaveManager waveManager)
        {
            _player = player;
            _minion = minion;
            _waveManager = waveManager;
        }

        public void CalculateIdleIncome()
        {
            var gameCloseTime = PlayerPrefs.GetString("_gameCloseTime");
            var gameClosedAt = DateTime.Parse(gameCloseTime);
            var now = DateTime.Now;
            var idleTime = now - gameClosedAt;
            var idleTimeInSeconds = idleTime.TotalSeconds;
            var _mageAttackDuration = _roadLength / (int)_minion.Data.GetSpeed();

            //Calculate Total Idle Damage
            _mageDps = _player.Data.CumulativeDps();
            _maxPotentialWaveDmg = _mageDps * _mageAttackDuration;

            //Establish Idle Currency Formula
            var multiplierMoney = Math.Pow(1.03, _waveManager.Data.CurrentWave); // %30 money multiplier
            var currencyGained = BigIntWithUnit.MultiplyPercent(WaveData.BaseCurrencyGivenOnDeath, multiplierMoney*100);
            currencyGained = BigIntWithUnit.MultiplyPercent(currencyGained, _waveManager.Data.GetCurrentWaveLength()*100);

            //Idle Currency Gaining
            for (int i = 0; i < 5; i++)
            {
                if (idleTimeInSeconds < _mageAttackDuration) //not enough time left to kill the wave
                {
                    break;
                }
                var waveKilled = _maxPotentialWaveDmg / _waveManager.WaveLife >= 1;
                if (waveKilled && !_waveManager.Data.IsNextWaveBossWave)
                {
                    _waveManager.Data.IncreaseCurrentWaveAndMaxWave();
                }
                currencyGained = BigIntWithUnit.MultiplyPercent(currencyGained, _maxPotentialWaveDmg / _waveManager.WaveLife*100);
                //ToDo: Don't do this here, do this in player script!
                _player.Data.IncreaseCurrency(currencyGained);
                idleTimeInSeconds -= _mageAttackDuration;
                if (waveKilled) //calculate currency gain of next wave if it comes
                {
                    currencyGained = BigIntWithUnit.MultiplyPercent(WaveData.BaseCurrencyGivenOnDeath, multiplierMoney*100);
                    currencyGained = BigIntWithUnit.MultiplyPercent(currencyGained, _waveManager.Data.GetCurrentWaveLength()*100);
                }
                else //next wave can't come 
                {
                    break;
                }
                if (_waveManager.Data.IsNextWaveBossWave) //next wave is boss, give money of the last wave continuously until time runs out
                {
                    Debug.Log("A Boss is attacking your castle!");
                    break; //send notification
                }
            }

            while (idleTimeInSeconds > _mageAttackDuration)
            {
                //ToDo: Don't do this here, do this in player script!
                //Calculate end currency amount and return
                _player.Data.IncreaseCurrency(currencyGained);
                idleTimeInSeconds -= _mageAttackDuration;
            }

            //ToDo: Add currency generated by idle mages
        }
    }
}
